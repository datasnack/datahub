[project]
name = "datahub"
dynamic = ["version"]
description = "Web-based GIS with a data harmonization engine"
readme = "README.md"
requires-python = ">=3.12"

dependencies = [
    "Django>=5.1.3,<5.2",
    "psycopg[binary]>=3.2.0",
    "datacite==1.1.3",
    "django-environ==0.11.2",
    "geopandas==1.0.1",
    "gunicorn==23.0.0",
    "meteostat==1.6.8",
    "numpy==2.1.3",
    "openpyxl==3.1.2",
    "osmnx==1.9.3",
    "pandas==2.2.3",
    "rasterio==1.4.1",
    "shapely==2.0.6",
    "SQLAlchemy==2.0.31", # used for pandas read_sql etc. connection string
    "GeoAlchemy2", # required for GeoPandas to_postgis()
    "django-taggit==6.1.0",
    "geojson==3.1.0",
    "cdsapi>=0.7.4",
    "xarray==2024.5.0",
    "fiona", # TiffLayer uses fiona for openening mask files, refactor to not depend on it
    "mistune>=3.0.2",
]

[tool.uv]
dev-dependencies = [
    "rich>=13.9.2", # console log color output
    "django-debug-toolbar>=4.3.0",
]


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    ".git-rewrite",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "__pypackages__",
    "node_modules",
    "**/migrations/**", # automatically generated by Django
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["ALL"]
ignore = [
    "E501",   # Line to long
    "D1",     # Missing Docstrings
    "TD002",  # don't require author on TODO
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN101",
    "ANN201",

    "TD003", # TODO: needs a link

    "ERA001", # Commented out code

    # Optional[type] = none should be type|None, though that misses the Optional charachter?
    # see https://github.com/astral-sh/ruff/issues/4858
    "UP007",

    "PD901", # df is to a genreic variable name for dataframes

    "ARG001", # unsuded function argument, but boilerplate code has sometimes unsused...

    "TRY003", # Exceptions shoud be own class (but also catches ValueError)
    "EM101",  # no f"string inside exeption init
    "EM102",  # no string inside exception init


    # ruff recommends to disable those
    "COM812", # trailing comma
    "ISC001", # single-line-implicit-string-concatenation

    "PERF401", # prefere list comprehension

    # those rule handle blank line before/after class and are in conflict
    "D203",  # CONFIG: incompatible with D211
    "D212",  # CONFIG: incompatible with D213

]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
split-on-trailing-comma = false
combine-as-imports = false
section-order = [
    "future",
    "standard-library",
    "third-party",
    "django",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.isort.sections]
"django" = ["django"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

