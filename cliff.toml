# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}](https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased](https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
            /compare/{{ previous.version }}..HEAD)
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | split(pat="\n") | first | upper_first | trim }} ([{{ commit.id | truncate(length=7, end="") }}](https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/commit/{{ commit.id }}))\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# regex for parsing and grouping commits
commit_parsers = [
  {message = "^[a|A]dd", group = "Added"},
  {message = "^[s|S]upport", group = "Added"},
  {message = "^[r|R]emove", group = "Removed"},
  {message = "^.*: add", group = "Added"},
  {message = "^.*: support", group = "Added"},
  {message = "^.*: remove", group = "Removed"},
  {message = "^.*: delete", group = "Removed"},
  {message = "^test", group = "Fixed"},
  {message = "^fix", group = "Fixed"},
  {message = "^.*: fix", group = "Fixed"},
  {message = "^refactor:", skip = true},
  {message = "^chore:", skip = true},
  {message = "^.*", group = "Changed"},
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"

[remote.github]
owner = "datasnack"
repo = "datahub"
